#version: '3.5'

services:
  caddy_reverse_proxy:
    # Use the caddy:latest image from Docker Hub
    image: caddy:latest
    # Restart policy: restart the container unless explicitly stopped
    restart: unless-stopped
    container_name: caddy_proxy
    # ports for Caddy
    ports:
      - 80:80
      - 443:443
    volumes:
      # Mount the host Caddyfile
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    # Connect the Caddy container caddy_net
    networks:
      - caddy_net
#    nextjs_app: //фронтенд
      # Remote Docker Hub image
#      image: rosechege/nextjs-app:latest
#      pull_policy: always
#      restart: always
      # Connect the container to the existing Docker network caddy_net

  postgres:
    image: postgres
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - ./postgres-init-scripts:/docker-entrypoint-initdb.d  # Монтируем папку с скриптами
    command: ["postgres", "-c", "log_statement=all"]  # Опционально, для отладки SQL запросов



  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=redispassword
      - REDIS_PORT=6379
      - REDIS_DATABASES=16



  auth:
    build:
      context: ../auth
      dockerfile: Dockerfile
    container_name: auth
    restart: always
    ports:
      - "8082:8082"
    depends_on:
      - postgres
#      - zookeeper
#      - kafka
      - redis
#      - minio
    environment:
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
#      KAFKA_BROKER: kafka:9092
      REDIS_HOST: redis
      REDIS_PASSWORD: redispassword
#      MINIO_ENDPOINT: http://minio:9000
#      MINIO_ACCESS_KEY: minio
#      MINIO_SECRET_KEY: miniopassword
  events:
    build:
      context: ../events
      dockerfile: Dockerfile
    container_name: events
    restart: always
    ports:
      - "8083:8083"
    depends_on:
      - postgres
      #      - zookeeper
      #      - kafka
      - redis
    #      - minio
    environment:
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      #      KAFKA_BROKER: kafka:9092
      REDIS_HOST: redis
      REDIS_PASSWORD: redispassword
  #      MINIO_ENDPOINT: http://minio:9000
  #      MINIO_ACCESS_KEY: minio
  #      MINIO_SECRET_KEY: miniopassword
  contacts:
    build:
      context: ../contacts
      dockerfile: Dockerfile
    container_name: contacts
    restart: always
    ports:
      - "8084:8084"
    depends_on:
      - postgres
      #      - zookeeper
      #      - kafka
      - redis
    #      - minio
  
    environment:
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      #      KAFKA_BROKER: kafka:9092
      REDIS_HOST: redis
      REDIS_PASSWORD: redispassword
  #      MINIO_ENDPOINT: http://minio:9000
  #      MINIO_ACCESS_KEY: minio
  #      MINIO_SECRET_KEY: miniopassword

  event_feedback:
    build:
      context: ../event_feedback
      dockerfile: Dockerfile
    container_name: event_feedback
    restart: always
    ports:
      - "8085:8085"
    depends_on:
      - postgres
      #      - zookeeper
      #      - kafka
      - redis
    #      - minio
  
    environment:
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      #      KAFKA_BROKER: kafka:9092
      REDIS_HOST: redis
      REDIS_PASSWORD: redispassword
  #      MINIO_ENDPOINT: http://minio:9000
  #      MINIO_ACCESS_KEY: minio
  #      MINIO_SECRET_KEY: miniopassword
  
  event_media:
    build:
      context: ../event_media
      dockerfile: Dockerfile
    container_name: event_media
    restart: always
    ports:
      - "8086:8086"
    depends_on:
      - postgres
      #      - zookeeper
      #      - kafka
      - redis
    #      - minio
  
    environment:
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      #      KAFKA_BROKER: kafka:9092
      REDIS_HOST: redis
      REDIS_PASSWORD: redispassword
  #      MINIO_ENDPOINT: http://minio:9000
  #      MINIO_ACCESS_KEY: minio
  #      MINIO_SECRET_KEY: miniopassword

  locations:
    build:
      context: ../locations
      dockerfile: Dockerfile
    container_name: locations
    restart: always
    ports:
      - "8087:8087"
    depends_on:
      - postgres
      #      - zookeeper
      #      - kafka
      - redis
    #      - minio
  
    environment:
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      #      KAFKA_BROKER: kafka:9092
      REDIS_HOST: redis
      REDIS_PASSWORD: redispassword
  #      MINIO_ENDPOINT: http://minio:9000
  #      MINIO_ACCESS_KEY: minio
  #      MINIO_SECRET_KEY: miniopassword

  logs:
    build:
      context: ../logs
      dockerfile: Dockerfile
    container_name: logs
    restart: always
    ports:
      - "8088:8088"
    depends_on:
      - postgres
      #      - zookeeper
      #      - kafka
      - redis
    #      - minio
  
    environment:
      DB_HOST: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      #      KAFKA_BROKER: kafka:9092
      REDIS_HOST: redis
      REDIS_PASSWORD: redispassword
  #      MINIO_ENDPOINT: http://minio:9000
  #      MINIO_ACCESS_KEY: minio
  #      MINIO_SECRET_KEY: miniopassword



  frontend:
    image: nginx:alpine
    container_name: frontend
    ports:
      - "8080:80"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro



volumes:
  caddy_data:
  caddy_config:

networks:
  caddy_net: